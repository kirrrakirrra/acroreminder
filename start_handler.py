from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
from datetime import datetime
import logging
import os

from google.oauth2 import service_account
from googleapiclient.discovery import build

SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SERVICE_ACCOUNT_FILE = 'service_account.json'
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
USERS_SHEET = 'users'

creds = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES
)
sheets_service = build('sheets', 'v4', credentials=creds).spreadsheets()

async def save_user_if_new(user_id: int, username: str, full_name: str):
    try:
        result = sheets_service.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=f"{USERS_SHEET}!A2:A"
        ).execute()
        existing_ids = [row[0] for row in result.get('values', [])]

        if str(user_id) not in existing_ids:
            now = datetime.now().strftime("%Y-%m-%d %H:%M")
            new_row = [
                str(user_id),
                f"@{username}" if username else "",
                full_name,
                now
            ]
            sheets_service.values().append(
                spreadsheetId=SPREADSHEET_ID,
                range=USERS_SHEET,
                valueInputOption="USER_ENTERED",
                insertDataOption="INSERT_ROWS",
                body={"values": [new_row]}
            ).execute()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —é–∑–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await save_user_if_new(user.id, user.username, user.full_name)
    await update.message.reply_text(
    "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
    "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
    "‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /check\n"
    "‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –ø—Ä–∞–≤–∏–ª–∞—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏—è—Ö —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /info\n\n"
    "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏ —Ç—Ä–µ–Ω–µ—Ä—É. –ú—ã –Ω–∞ —Å–≤—è–∑–∏ üòä"
)

def get_start_handler():
    return CommandHandler("start", start_command)
