from google.oauth2 import service_account
from googleapiclient.discovery import build
from telegram import Update
from telegram.ext import ContextTypes
import os
import logging
import datetime
from scheduler_handler import check_expired_subscriptions, groups

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets
SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']
SERVICE_ACCOUNT_FILE = 'service_account.json'
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")  # –±–µ—Ä—ë–º –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
SHEET_RANGE = '–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã!B1:V'

creds = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES
)
sheets_service = build('sheets', 'v4', credentials=creds).spreadsheets()
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def check_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user.username
    user_id = update.effective_user.id
    full_name = update.effective_user.full_name

    logging.info(f"/check used by {full_name} (@{user}) [ID: {user_id}]")

    karina_id = os.getenv("KARINA_ID")
    if karina_id:
        try:
            await context.bot.send_message(
                chat_id=karina_id,
                text=f"üëÄ –ö–æ–º–∞–Ω–¥—É /check –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª: {full_name} (@{user}) [ID: {user_id}]"
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

    # if not user:
    #     return await update.message.reply_text(
    #         "‚ùó –£ –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω Telegram‚Äêusername. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram."
    #     )

    resp = sheets_service.values().get(
        spreadsheetId=SPREADSHEET_ID,
        range=SHEET_RANGE
    ).execute()
    rows = resp.get('values', [])

    if len(rows) < 2:
        return await update.message.reply_text("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

    header = rows[0]
    try:
        idx_name = header.index("–ò–º—è —Ä–µ–±—ë–Ω–∫–∞")
        idx_group = header.index("–ì—Ä—É–ø–ø–∞")
        idx_start = header.index("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞")
        idx_end = header.index("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è")
        idx_used = header.index("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ")
        idx_diff = header.index("–†–∞–∑–Ω–∏—Ü–∞")
        idx_remaining = header.index("–û—Å—Ç–∞–ª–æ—Å—å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π")  # üëà –Ω–æ–≤–æ–µ
        idx_used_left = header.index("–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π")
        idx_usercol = header.index("username")
        idx_idcol = header.index("user_id")
        visit_cols = [f"{i} –ø–æ—Å–µ—â–µ–Ω–∏–µ" for i in range(1, 9)]
        idx_dates = [header.index(col) for col in visit_cols]
    except ValueError as e:
        return await update.message.reply_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ: {e}")

    # username-—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–±–µ–∑ @, —Å –Ω–∏–∂–Ω–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º)
    user_rows = []

    # 1. –ü–æ–∏—Å–∫ –ø–æ username, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
    raw_user = update.effective_user.username
    if raw_user:
        user = raw_user.lstrip('@').lower()
        for row in rows[1:]:
            if len(row) <= idx_usercol:
                continue
            cell = row[idx_usercol]
            allowed = [n.strip().lstrip('@').lower() for n in cell.split(',') if n.strip()]
            if user in allowed:
                user_rows.append(row)

    # 2. –ï—Å–ª–∏ –ø–æ username –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –∏—â–µ–º –ø–æ user_id
    if not user_rows:
        try:
            idx_idcol = header.index("user_id")
        except ValueError:
            idx_idcol = None

        if idx_idcol is not None:
            for row in rows[1:]:
                if len(row) > idx_idcol:
                    cell = str(row[idx_idcol])
                    allowed_ids = [n.strip() for n in cell.split(',') if n.strip()]
                    if str(user_id) in allowed_ids:
                        user_rows.append(row)

    # 3. –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –ø—É—Å—Ç–æ ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not user_rows:
        return await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤, –∏–ª–∏ –≤–∞—à username –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages = []
    for row in user_rows:
        name = row[idx_name] if len(row) > idx_name else "‚Äî"
        group = row[idx_group] if len(row) > idx_group else "‚Äî"
        start = row[idx_start] if len(row) > idx_start else "‚Äî"
        end = row[idx_end] if len(row) > idx_end else "‚Äî"
        used = row[idx_used] if len(row) > idx_used else "0"
       # –í—Å—Ç–∞–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ "–†–∞–∑–Ω–∏—Ü–∞"
        remaining_info = ""
        if len(row) > idx_diff and row[idx_diff].strip():
            used_left = row[idx_used_left].strip() if len(row) > idx_used_left else "‚Äî"
            remaining = row[idx_remaining].strip() if len(row) > idx_remaining else "‚Äî"
            remaining_info = (
                f"\n\n‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å *{used_left}* –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π, "
                f"–∞ –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ä–æ–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ ‚Äî *{remaining}* –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫."
            )
        from datetime import datetime

        expired_warning = ""
        # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç—ã
        date_formats = ["%d.%m.%Y", "%d/%m/%y", "%d/%m/%Y", "%Y-%m-%d"]
        for fmt in date_formats:
            try:
                end_date = datetime.strptime(end, fmt)
                today = datetime.now()
                if end_date.date() < today.date() and int(used) < 8:
                    expired_warning = f"\n\n‚ÄºÔ∏è *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è {end}!*"
                break  # —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–ª–∏, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            except ValueError:
                continue
        else:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {end}")


        dates = []
        for i, idx in enumerate(idx_dates, start=1):
            if len(row) > idx and row[idx].strip():
                dates.append(f"{i}. {row[idx]}")
        dates_text = "\n".join(dates) if dates else "‚Äî"

        msg = (
            f"üë§ *–ò–º—è:* `{name}`\n"
            f"üè∑Ô∏è *–ì—Ä—É–ø–ø–∞:* `{group}`\n"
            f"üìÜ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* `{start} ‚Äî {end}`\n"
            f"‚úÖ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:* `{used}` –∏–∑ `8`\n"
            f"üìÖ *–î–∞—Ç—ã –ø–æ—Å–µ—â–µ–Ω–∏–π:*\n{dates_text}"
            f"{remaining_info}"
            f"{expired_warning}"
        )
        messages.append(msg)

    await update.message.reply_text("\n\n".join(messages), parse_mode="Markdown")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Äî –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã
async def expired_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    admin_id = os.getenv("ADMIN_ID")

    if str(user_id) != str(admin_id):
        await update.message.reply_text("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –û–ø—Ä–µ–¥–µ–ª–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≥—Ä—É–ø–ø—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    now = datetime.datetime.utcnow() + datetime.timedelta(hours=7)
    weekday = now.strftime("%A")

    group_name_map = {
        "–°—Ç–∞—Ä—à–µ–π –Ω–∞—á–∏–Ω–∞—é—â–µ–π –≥—Ä—É–ø–ø—ã": "6-9 –ª–µ—Ç –Ω–∞—á–∏–Ω–∞—é—â–∏–µ",
        "–°—Ç–∞—Ä—à–µ–π –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–µ–π –≥—Ä—É–ø–ø—ã": "6-9 –ª–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
        "–ú–ª–∞–¥—à–µ–π –≥—Ä—É–ø–ø—ã": "4-5 –ª–µ—Ç",
    }

    today_groups = [
        group_name_map.get(group["name"])
        for group in groups
        if weekday in group["days"]
    ]

    await check_expired_subscriptions(context.application, today_groups)
    await update.message.reply_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

