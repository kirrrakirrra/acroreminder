import asyncio
import logging
import os
import re
from utils import now_local, format_now
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from datetime import datetime, timedelta

# delay_minutes = int(os.getenv("REPORT_DELAY_MINUTES", 1))
report_hour = int(os.getenv("REPORT_HOUR", 15))
report_minute = int(os.getenv("REPORT_MINUTE", 10))

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≥–æ–ª–æ—Å–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç) –∏ poll_id ‚Üí group
poll_votes = {}
poll_to_group = {}

# Google Sheets
from google.oauth2 import service_account
from googleapiclient.discovery import build

SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SERVICE_ACCOUNT_FILE = 'service_account.json'
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
SURVEY_SHEET = '–û–ø—Ä–æ—Å—ã'
USERNAMES_SHEET = "usernames"

creds = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES
)
sheets_service = build('sheets', 'v4', credentials=creds).spreadsheets()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤
async def handle_poll_answer(update, context):
    poll_id = update.poll_answer.poll_id
    user = update.poll_answer.user
    user_id = user.id
    username = user.username or "(–±–µ–∑ username)"
    vote_time = format_now()
    full_name = user.full_name

    selected_options = update.poll_answer.option_ids
    if not selected_options:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ poll.message.options (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    option_text = ""
    try:
        options = context.bot_data.get(poll_id)
        if options and len(selected_options) > 0:
            option_text = options[selected_options[0]].text
    except Exception as e:
        logging.warning(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –æ–ø—Ü–∏–∏: {e}")
        option_text = "(–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞)"
       
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ poll_to_group
    group_name = poll_to_group.get(poll_id, {}).get("name", "?")
    logging.info(f"üìù –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥—Ä—É–ø–ø—ã: {group_name}")

    # –ü–∏—à–µ–º –≤ –ø–∞–º—è—Ç—å (—Ä–µ–∑–µ—Ä–≤–Ω–æ)
    if poll_id not in poll_votes:
        poll_votes[poll_id] = set()
    poll_votes[poll_id].add(user_id)

    # –ó–∞–ø–∏—Å—å –≤ Google Sheet
    try:
        new_row = [[
            poll_id,
            group_name,
            str(user_id),
            f"@{username}" if username else "",
            vote_time,
            full_name,
            option_text
        ]]
        sheets_service.values().append(
            spreadsheetId=SPREADSHEET_ID,
            range=SURVEY_SHEET,
            valueInputOption="USER_ENTERED",
            insertDataOption="INSERT_ROWS",
            body={"values": new_row}
        ).execute()
        logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ–ø—Ä–æ—Å–∞ –∑–∞–ø–∏—Å–∞–Ω: {user_id} / @{username} ‚Äî {option_text}")
    except Exception as e:
        logging.warning(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")

# üß† –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º poll_id ‚Üí group_name –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def restore_poll_to_group():
    """
    –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å poll_to_group –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '–û–ø—Ä–æ—Å—ã',
    —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π –æ–ø—Ä–æ—Å –∫ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è (–≤ —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞).
    """
    try:
        resp = sheets_service.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range="–û–ø—Ä–æ—Å—ã!A2:G"  # A2 ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, G ‚Äî –∫–æ–ª–æ–Ω–∫–∞ "–æ—Ç–≤–µ—Ç"
        ).execute()

        rows = resp.get("values", [])
        for row in rows:
            if len(row) < 2:
                continue  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º poll_id + group_name
            poll_id = row[0].strip()
            group_name = row[1].strip()
            if poll_id and group_name:
                poll_to_group[poll_id] = {"name": group_name}
        logging.info(f"‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(poll_to_group)} –∑–∞–ø–∏—Å–µ–π poll_to_group")
    except Exception as e:
        logging.warning(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ poll_to_group: {e}")

# –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (—Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è)
async def schedule_report(app, group, poll_id):
    poll_to_group[poll_id] = group
    now = now_local()
    
    TEST_DELAY_MINUTES = 1
    if TEST_DELAY_MINUTES:
        delay_seconds = TEST_DELAY_MINUTES * 60
        logging.info(f"üß™ –¢–µ—Å—Ç: –∂–¥–µ–º {TEST_DELAY_MINUTES} –º–∏–Ω—É—Ç –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞")
        await asyncio.sleep(delay_seconds)
        await send_admin_report(app, poll_id)
        return
        
    report_time = now.replace(hour=report_hour, minute=report_minute, second=0, microsecond=0)

    # ‚õî –ï—Å–ª–∏ —É–∂–µ –ø–æ–∑–∂–µ ‚Äî –ù–ï –û–¢–ü–†–ê–í–õ–Ø–ï–ú
    if report_time <= now:
        logging.warning(f"‚ö†Ô∏è –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–æ ({report_time.strftime('%H:%M')}), –æ—Ç—á—ë—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        return

    delay_seconds = (report_time - now).total_seconds()
    logging.info(f"üïí –û–∂–∏–¥–∞–µ–º {int(delay_seconds)} —Å–µ–∫—É–Ω–¥ –¥–æ –æ—Ç—á–µ—Ç–∞ –≤ {report_time.strftime('%H:%M')}")
    await asyncio.sleep(delay_seconds)
    await send_admin_report(app, poll_id)


def escape_md(text):
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown (v1), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ Telegram.
    """
    return re.sub(r'([_*[\]()])', r'\\\1', text)
    
# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –∞–¥–º–∏–Ω—É  
async def send_admin_report(app, poll_id, report_message_id=None, ping_message_id=None):
    group = poll_to_group.get(poll_id)
    if not group:
        logging.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –¥–ª—è poll_id={poll_id}")
        return
    logging.info(f"üì§ –ì–æ—Ç–æ–≤–∏–º –æ—Ç—á—ë—Ç –ø–æ poll_id={poll_id} –¥–ª—è –≥—Ä—É–ø–ø—ã: {group['name']}")

    try:
        from scheduler_handler import ADMIN_ID
        
        group_name_code = group["name"]

        resp = sheets_service.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=USERNAMES_SHEET + "!A1:N"
        ).execute()
        rows = resp.get("values", [])
        
        header = rows[0]
        try:
            idx_name = header.index("–∏–º—è")
            idx_username = header.index("username1")
            idx_parent = header.index("–ò–º—è –†–æ–¥–∏—Ç–µ–ª—è1")
            idx_pause = header.index("–ü–∞—É–∑–∞")
            idx_voted = header.index("–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è")
            idx_group = header.index("—Ç–µ—Ö –≥—Ä—É–ø–ø–∞")
        except ValueError as e:
            logging.warning(f"‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {e}")
            return
        rows = rows[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫


        def safe_get(row, idx, default=""):
            return row[idx].strip() if len(row) > idx and row[idx] else default
        
        # –õ–æ–≥ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        for i, row in enumerate(rows, start=1):
            logging.info(f"[DEBUG] Row {i}: length={len(row)} | values={row}")
        
        # –ö—Ç–æ –∫–∞–∫ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª
        voted_by_subscription = []
        voted_by_one_time = []
        voted_absent = []
        not_voted_subscription = []
        not_voted_paused = []
        not_voted_one_time = []
        
        for row in rows:
            if len(row) < idx_group:
                continue
            group_col = safe_get(row, idx_group)
            if group_col != group_name_code:
                continue
        
            name = safe_get(row, idx_name).strip()
            parent_name = safe_get(row, idx_parent).strip()
            username = escape_md(safe_get(row, idx_username).strip())
            pause = safe_get(row, idx_pause).strip().upper()
            voted = safe_get(row, idx_voted).strip().lower()
        
            parent_info = f"üë§ {parent_name}"
            if username:
                parent_info += f" (@{username})"
            child_info = f"üßí {name}\n‚ÄÉ‚ÄÉ ‚ÄÉ{parent_info}"
        
            if "–ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É" in voted:
                voted_by_subscription.append(child_info)
            elif "—Ä–∞–∑–æ–≤–æ" in voted:
                voted_by_one_time.append(child_info)
            elif "–ø—Ä–æ–ø—É—Å–∫–∞–µ–º" in voted:
                voted_absent.append(child_info)
            elif not voted:
                if pause == "TRUE":
                    not_voted_paused.append(child_info)
                elif pause == "–†–ê–ó–û–í–û":
                    not_voted_one_time.append(child_info)
                else:
                    not_voted_subscription.append(child_info)
        
        parts = [f"üìã *–û—Ç—á—ë—Ç {group_name_code}:*"]
        
        if voted_by_subscription:
            parts.append(f"==> ‚úÖ *–ü–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É ({len(voted_by_subscription)}):*\n\n" + "\n".join(voted_by_subscription))
        if voted_by_one_time:
            parts.append(f"==> üíµ *–†–∞–∑–æ–≤–æ ({len(voted_by_one_time)}):*\n\n" + "\n".join(voted_by_one_time))
        if voted_absent:
            parts.append(f"==> ‚ùå *–ü—Ä–æ–ø—É—Å–∫–∞—é—Ç ({len(voted_absent)}):*\n\n" + "\n".join(voted_absent))
        
        parts.append("--------- ‚ÅâÔ∏è *–ù–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å:* ---------")
        
        if not_voted_subscription:
            parts.append(f"==> üéü *–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã ({len(not_voted_subscription)}):*\n\n" + "\n".join(not_voted_subscription))
        if not_voted_paused:
            parts.append(f"==> ‚è∏ *–ù–∞ –ø–∞—É–∑–µ ({len(not_voted_paused)}):*\n\n" + "\n".join(not_voted_paused))
        if not_voted_one_time:
            parts.append(f"==> üíµ *–•–æ–¥—è—Ç —Ä–∞–∑–æ–≤–æ ({len(not_voted_one_time)}):*\n\n" + "\n".join(not_voted_one_time))
        
        report = "\n\n".join(parts)
        logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É:\n{report}")
        # await app.bot.send_message(chat_id=ADMIN_ID, text=report, parse_mode=ParseMode.MARKDOWN)

        report_msg = None
        ping_msg = None
                # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id
        if report_message_id:
            await app.bot.edit_message_text(
                chat_id=ADMIN_ID,
                message_id=report_message_id,
                text=report,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_report|{poll_id}")]
                ])
            )
        else:
            report_msg = await app.bot.send_message(
                chat_id=ADMIN_ID,
                text=report,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_report|{poll_id}")]
                ])
            )
        
        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        mentions = []
        for row in rows:
            if len(row) < idx_group:
                continue
            group_col = safe_get(row, idx_group)
            if group_col != group_name_code:
                continue
        
            pause = safe_get(row, idx_pause).upper()
            voted = safe_get(row, idx_voted)
            username = safe_get(row, idx_username)
        
            if not voted and pause != "TRUE" and pause != "–†–ê–ó–û–í–û" and username:
                mentions.append(f"@{username}")
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–≥–æ —É–ø–æ–º–∏–Ω–∞—Ç—å
        if mentions:
            mention_text = "üëã –†–æ–¥–∏—Ç–µ–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ—Ç—å—Ç–µ—Å—å –≤ –æ–ø—Ä–æ—Å–µ:\n" + " ".join(mentions)
            if ping_message_id:
                await app.bot.edit_message_text(
                    chat_id=ADMIN_ID,
                    message_id=ping_message_id,
                    text=mention_text,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üì£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", callback_data=f"notify_parents|{poll_id}")]
                    ])
                )
            else:
                ping_msg = await app.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=mention_text,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üì£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", callback_data=f"notify_parents|{poll_id}")]
                    ])
                )
        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è –∑–∞–Ω–æ–≤–æ
        report_msg_id = report_msg.message_id if not report_message_id else report_message_id
        ping_msg_id = ping_msg.message_id if not ping_message_id else ping_message_id

        # 4. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–≤—è–∑–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É "–†–µ–ø–æ—Ä—Ç—ã"
        if not report_message_id and report_msg:
            try:
                new_row = [[
                    poll_id.strip(),
                    group_name_code,
                    str(report_msg.message_id),
                    str(ping_msg.message_id) if ping_msg else "",
                    "",  # group_chat_id
                    "",  # thread_id
                ]]
                sheets_service.values().append(
                    spreadsheetId=SPREADSHEET_ID,
                    range="–†–µ–ø–æ—Ä—Ç—ã!A1",
                    valueInputOption="USER_ENTERED",
                    insertDataOption="INSERT_ROWS",
                    body={"values": new_row}
                ).execute()
                logging.info(f"‚úÖ –°–≤—è–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –†–µ–ø–æ—Ä—Ç—ã")
            except Exception as e:
                logging.warning(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å–≤—è–∑–∫–∏ –≤ –†–µ–ø–æ—Ä—Ç—ã: {e}")

    except Exception as e:
        logging.warning(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")
        
async def refresh_report_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, poll_id = query.data.split("|")

    # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –†–µ–ø–æ—Ä—Ç—ã
    try:
        resp = sheets_service.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range="–†–µ–ø–æ—Ä—Ç—ã!A2:G"  # –∑–∞–≥–æ–ª–æ–≤–∫–∏: poll_id, group_name, report_msg_id, ping_msg_id, group_id, thread_id, date
        ).execute()
        rows = resp.get("values", [])

        row = next((r for r in rows if r[0] == poll_id), None)
        if not row:
            await query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–≤—è–∑–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –†–µ–ø–æ—Ä—Ç—ã.")
            return

        group_name = row[1]
        report_msg_id = int(row[2]) if row[2] else None
        ping_msg_id = int(row[3]) if row[3] else None

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º—É–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤ —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        poll_to_group[poll_id] = {"name": group_name}

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –∏ –ø–∏–Ω–≥
        await send_admin_report(
            app=context.application,
            poll_id=poll_id,
            report_message_id=report_msg_id,
            ping_message_id=ping_msg_id
        )

    except Exception as e:
        logging.warning(f"‚ùó –û—à–∏–±–∫–∞ –≤ refresh_report_callback: {e}")
