import asyncio
import logging
import os
import re
from telegram.constants import ParseMode
from datetime import datetime

delay_minutes = int(os.getenv("REPORT_DELAY_MINUTES", 5))

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≥–æ–ª–æ—Å–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
poll_votes = {}

# –•—Ä–∞–Ω–∏–º —Å–≤—è–∑—å poll_id ‚Üí group
poll_to_group = {}

# Google Sheets
from google.oauth2 import service_account
from googleapiclient.discovery import build
import os

SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SERVICE_ACCOUNT_FILE = 'service_account.json'
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
SURVEY_SHEET = '–û–ø—Ä–æ—Å—ã'
USERNAMES_SHEET = "usernames"

creds = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES
)
sheets_service = build('sheets', 'v4', credentials=creds).spreadsheets()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤
async def handle_poll_answer(update, context):
    poll_id = update.poll_answer.poll_id
    user = update.poll_answer.user
    user_id = user.id
    username = user.username or "(–±–µ–∑ username)"
    vote_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    full_name = user.full_name

    selected_options = update.poll_answer.option_ids
    if not selected_options:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ poll.message.options (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    option_text = ""
    try:
        options = context.bot_data.get(poll_id)
        if options and len(selected_options) > 0:
            option_text = options[selected_options[0]].text
    except Exception as e:
        logging.warning(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –æ–ø—Ü–∏–∏: {e}")
        option_text = "(–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞)"
       
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ poll_to_group
    group_name = poll_to_group.get(poll_id, {}).get("name", "?")
    logging.info(f"üìù –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥—Ä—É–ø–ø—ã: {group_name}")

    # –ü–∏—à–µ–º –≤ –ø–∞–º—è—Ç—å (—Ä–µ–∑–µ—Ä–≤–Ω–æ)
    if poll_id not in poll_votes:
        poll_votes[poll_id] = set()
    poll_votes[poll_id].add(user_id)

    # –ó–∞–ø–∏—Å—å –≤ Google Sheet
    try:
        new_row = [[
            poll_id,
            group_name,
            str(user_id),
            f"@{username}" if username else "",
            vote_time,
            full_name,
            option_text
        ]]
        sheets_service.values().append(
            spreadsheetId=SPREADSHEET_ID,
            range=SURVEY_SHEET,
            valueInputOption="USER_ENTERED",
            insertDataOption="INSERT_ROWS",
            body={"values": new_row}
        ).execute()
        logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ–ø—Ä–æ—Å–∞ –∑–∞–ø–∏—Å–∞–Ω: {user_id} / @{username} ‚Äî {option_text}")
    except Exception as e:
        logging.warning(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")

# –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞
async def schedule_report(app, group, poll_id):
    poll_to_group[poll_id] = group
    await asyncio.sleep(60 * delay_minutes)
    await send_admin_report(app, poll_id)

def escape_md(text):
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown (v1), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ Telegram.
    """
    return re.sub(r'([_*[\]()])', r'\\\1', text)
    
# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ delay_minutes 
async def send_admin_report(app, poll_id):
    group = poll_to_group.get(poll_id)
    if not group:
        logging.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –¥–ª—è poll_id={poll_id}")
        return
    logging.info(f"üì§ –ì–æ—Ç–æ–≤–∏–º –æ—Ç—á—ë—Ç –ø–æ poll_id={poll_id} –¥–ª—è –≥—Ä—É–ø–ø—ã: {group['name']}")

    try:
        from scheduler_handler import ADMIN_ID
        
        group_name_code = group["name"]

        resp = sheets_service.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=USERNAMES_SHEET + "!A2:M"
        ).execute()
        rows = resp.get("values", [])

        idx_name = 1
        idx_username = 2
        idx_parent = 7
        idx_pause = 9
        idx_voted = 10
        idx_group = 11

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: –∫—Ç–æ –∫–∞–∫ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª
        voted_by_subscription = []
        voted_by_one_time = []
        voted_absent = []

        # –ö—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª ‚Äî –¥–µ–ª–∏–º –Ω–∞ 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        not_voted_subscription = []
        not_voted_paused = []
        not_voted_one_time = []
        
        for row in rows:
            if len(row) < idx_group:
                continue
            group_col = row[idx_group].strip()
            if group_col != group_name_code:
                continue
            name = row[idx_name].strip()
            parent_name = row[idx_parent].strip() if len(row) > idx_parent else ""
            username = escape_md(row[idx_username].strip()) if len(row) > idx_username else ""
            pause = row[idx_pause].strip().upper() if len(row) > idx_pause else ""
            voted = row[idx_voted].strip().lower()

            parent_info = f"üë§ {parent_name}"
            if username:
                parent_info += f" (@{username})"
            child_info = f"üßí {name}\n‚ÄÉ‚ÄÉ{parent_info}"

            if "–ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É" in voted:
                voted_by_subscription.append(child_info)
            elif "—Ä–∞–∑–æ–≤–æ" in voted:
                voted_by_one_time.append(child_info)
            elif "–ø—Ä–æ–ø—É—Å–∫–∞–µ–º" in voted:
                voted_absent.append(child_info)
            elif not voted:
                if pause == "TRUE":
                    not_voted_paused.append(child_info)
                elif pause == "–†–ê–ó–û–í–û":
                    not_voted_one_time.append(child_info)
                else:
                    not_voted_subscription.append(child_info)
            
        parts = [f"üìã __–û—Ç—á—ë—Ç {group_name_code}:__"]

        # === –¢–µ, –∫—Ç–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª ===
        if voted_by_subscription:
            parts.append(f"‚úÖ __–ü–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É ({len(voted_by_subscription)}):__\n\n" + "\n".join(voted_by_subscription))
        if voted_by_one_time:
            parts.append(f"üíµ __–†–∞–∑–æ–≤–æ ({len(voted_by_one_time)}):__\n\n" + "\n".join(voted_by_one_time))
        if voted_absent:
            parts.append(f"‚ùå __–ü—Ä–æ–ø—É—Å–∫–∞—é—Ç ({len(voted_absent)}):__\n" + "\n".join(voted_absent))
        
        # === –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ===
        parts.append("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
        
        # === –ù–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å ===
        parts.append("‚ÅâÔ∏è __–ù–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å:__")
        
        if not_voted_subscription:
            parts.append(f"üéü __–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã ({len(not_voted_subscription)}):__\n\n" + "\n".join(not_voted_subscription))
        
        if not_voted_paused:
            parts.append(f"‚è∏ __–ù–∞ –ø–∞—É–∑–µ ({len(not_voted_paused)}):__\n\n" + "\n".join(not_voted_paused))
        
        if not_voted_one_time:
            parts.append(f"üíµ __–•–æ–¥—è—Ç —Ä–∞–∑–æ–≤–æ ({len(not_voted_one_time)}):__\n\n" + "\n".join(not_voted_one_time))

        
        report = "\n\n".join(parts)
        
        logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É:\n{report}")
        await app.bot.send_message(chat_id=ADMIN_ID, text=report, parse_mode=ParseMode.MARKDOWN)
    
    except Exception as e:
        logging.warning(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")
        
