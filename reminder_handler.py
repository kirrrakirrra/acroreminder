import asyncio
import logging
from telegram.constants import ParseMode
from datetime import datetime

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≥–æ–ª–æ—Å–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
poll_votes = {}

# –•—Ä–∞–Ω–∏–º —Å–≤—è–∑—å poll_id ‚Üí group
poll_to_group = {}

# Google Sheets
from google.oauth2 import service_account
from googleapiclient.discovery import build
import os

SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SERVICE_ACCOUNT_FILE = 'service_account.json'
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
SURVEY_SHEET = '–û–ø—Ä–æ—Å—ã'

creds = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES
)
sheets_service = build('sheets', 'v4', credentials=creds).spreadsheets()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤
async def handle_poll_answer(update, context):
    poll_id = update.poll_answer.poll_id
    user = update.poll_answer.user
    user_id = user.id
    username = user.username or "(–±–µ–∑ username)"
    full_name = user.full_name
    vote_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    selected_options = update.poll_answer.option_ids
    if not selected_options:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ poll.message.options (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    option_text = ""
    try:
        poll = context.bot_data.get(poll_id)
        if poll:
            option_text = poll.options[selected_options[0]].text
    except:
        option_text = "(–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞)"

    group_name = poll_to_group.get(poll_id, {}).get("name", "?")

    # –ü–∏—à–µ–º –≤ –ø–∞–º—è—Ç—å (—Ä–µ–∑–µ—Ä–≤–Ω–æ)
    if poll_id not in poll_votes:
        poll_votes[poll_id] = set()
    poll_votes[poll_id].add(user_id)

    # –ó–∞–ø–∏—Å—å –≤ Google Sheet
    try:
        new_row = [[
            poll_id,
            group_name,
            str(user_id),
            f"@{username}" if username else "",
            full_name,
            option_text,
            vote_time
        ]]
        sheets_service.values().append(
            spreadsheetId=SPREADSHEET_ID,
            range=SURVEY_SHEET,
            valueInputOption="USER_ENTERED",
            insertDataOption="INSERT_ROWS",
            body={"values": new_row}
        ).execute()
        logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ–ø—Ä–æ—Å–∞ –∑–∞–ø–∏—Å–∞–Ω: {user_id} / @{username} ‚Äî {option_text}")
    except Exception as e:
        logging.warning(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")

 # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç
async def schedule_reminder(app, group, poll_id):
    poll_to_group[poll_id] = group
#     # await asyncio.sleep(60 * 60)
#     # await send_nonresponders_reminder(app, poll_id)

# # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ø—Ä–æ—Å–∞ –∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
# async def send_nonresponders_reminder(app, poll_id):
#     group = poll_to_group.get(poll_id)
#     if not group:
#         logging.warning(f"‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –¥–ª—è poll_id {poll_id}")
#         return

#     try:
#         from scheduler_handler import sheets_service, SPREADSHEET_ID, SHEET_RANGE

#         resp = sheets_service.values().get(
#             spreadsheetId=SPREADSHEET_ID,
#             range=SHEET_RANGE
#         ).execute()
#         rows = resp.get("values", [])
#         if len(rows) < 2:
#             return

#         header = rows[0]
#         idx_usercol = header.index("username")
#         idx_group = header.index("–ì—Ä—É–ø–ø–∞")
#         idx_pause = header.index("–ü–∞—É–∑–∞") if "–ü–∞—É–∑–∞" in header else None

#         group_name = group["name"]
#         group_names_map = {
#             "–°—Ç–∞—Ä—à–µ–π –Ω–∞—á–∏–Ω–∞—é—â–µ–π –≥—Ä—É–ø–ø—ã": "6-9 –ª–µ—Ç –Ω–∞—á–∏–Ω–∞—é—â–∏–µ",
#             "–°—Ç–∞—Ä—à–µ–π –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–µ–π –≥—Ä—É–ø–ø—ã": "6-9 –ª–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
#             "–ú–ª–∞–¥—à–µ–π –≥—Ä—É–ø–ø—ã": "4-5 –ª–µ—Ç",
#         }
#         group_value = group_names_map.get(group_name)

#         mentions = []
#         for row in rows[1:]:
#             if len(row) <= max(idx_usercol, idx_group):
#                 continue
#             group_cell = row[idx_group].strip()
#             if group_cell != group_value:
#                 continue

#             username = row[idx_usercol].strip().lstrip("@").lower()
#             if not username:
#                 continue

#             pause = row[idx_pause].strip().upper() if idx_pause and len(row) > idx_pause else ""
#             if pause == "TRUE":
#                 continue

#             mentions.append(f"@{username}")

#         # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏–∑ Google Sheet
#         result = sheets_service.values().get(
#             spreadsheetId=SPREADSHEET_ID,
#             range=SURVEY_SHEET + "!A2:G"
#         ).execute()
#         voted_rows = result.get("values", [])
#         voted_usernames = set(row[3].lstrip("@").lower() for row in voted_rows if row[0] == poll_id)

#         final_mentions = [m for m in mentions if m.lstrip("@").lower() not in voted_usernames]

#         if final_mentions:
#             text = (
#                 "‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n"
#                 "–ö—Ç–æ-—Ç–æ –∏–∑ –≤–∞—Å –µ—â—ë –Ω–µ –æ—Ç–º–µ—Ç–∏–ª —É—á–∞—Å—Ç–∏–µ –≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –∑–∞–Ω—è—Ç–∏–∏. "
#                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ—Ç—å—Ç–µ—Å—å –≤ –æ–ø—Ä–æ—Å–µ –≤—ã—à–µ üëÜ\n\n"
#                 + " ".join(final_mentions)
#             )

#             await app.bot.send_message(
#                 chat_id=group["thread_id"],
#                 message_thread_id=group["thread_id"],
#                 text=text,
#                 parse_mode=ParseMode.MARKDOWN
#             )
#         else:
#             logging.info(f"‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–∑ {group['name']} –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å")

#     except Exception as e:
#         logging.warning(f"‚ùó –û—à–∏–±–∫–∞ –≤ send_nonresponders_reminder: {e}")
