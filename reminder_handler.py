import asyncio
import logging
from telegram.constants import ParseMode

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≥–æ–ª–æ—Å–æ–≤: {poll_id: set(user_ids)}
poll_votes = {}

# –•—Ä–∞–Ω–∏–º —Å–≤—è–∑—å –º–µ–∂–¥—É poll_id –∏ –≥—Ä—É–ø–ø–æ–π
poll_to_group = {}

# –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ handler'–∞ PollAnswer
async def handle_poll_answer(update, context):
    poll_id = update.poll_answer.poll_id
    user_id = update.poll_answer.user.id

    if poll_id not in poll_votes:
        poll_votes[poll_id] = set()
    poll_votes[poll_id].add(user_id)

# –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç
async def schedule_reminder(app, group, poll_id):
    poll_to_group[poll_id] = group
    await asyncio.sleep(60 * 60)  # 1 —á–∞—Å –æ–∂–∏–¥–∞–Ω–∏—è
    await send_nonresponders_reminder(app, poll_id)

# –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–º–µ—Ç–∏–≤—à–∏—Ö—Å—è
async def send_nonresponders_reminder(app, poll_id):
    group = poll_to_group.get(poll_id)
    if not group:
        logging.warning(f"‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –¥–ª—è poll_id {poll_id}")
        return

    try:
        from scheduler_handler import sheets_service, SPREADSHEET_ID, SHEET_RANGE

        resp = sheets_service.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=SHEET_RANGE
        ).execute()
        rows = resp.get("values", [])
        if len(rows) < 2:
            return

        header = rows[0]
        idx_usercol = header.index("username")
        idx_group = header.index("–ì—Ä—É–ø–ø–∞")
        idx_pause = header.index("–ü–∞—É–∑–∞") if "–ü–∞—É–∑–∞" in header else None

        group_name = group["name"]
        group_names_map = {
            "–°—Ç–∞—Ä—à–µ–π –Ω–∞—á–∏–Ω–∞—é—â–µ–π –≥—Ä—É–ø–ø—ã": "6-9 –ª–µ—Ç –Ω–∞—á–∏–Ω–∞—é—â–∏–µ",
            "–°—Ç–∞—Ä—à–µ–π –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–µ–π –≥—Ä—É–ø–ø—ã": "6-9 –ª–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
            "–ú–ª–∞–¥—à–µ–π –≥—Ä—É–ø–ø—ã": "4-5 –ª–µ—Ç",
        }
        group_value = group_names_map.get(group_name)

        mentions = []
        for row in rows[1:]:
            if len(row) <= max(idx_usercol, idx_group):
                continue
            group_cell = row[idx_group].strip()
            if group_cell != group_value:
                continue

            username = row[idx_usercol].strip().lstrip("@").lower()
            if not username:
                continue

            pause = row[idx_pause].strip().upper() if idx_pause and len(row) > idx_pause else ""
            if pause == "TRUE":
                continue

            # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ username –Ω–µ–ª—å–∑—è –Ω–∞–ø—Ä—è–º—É—é ‚Äî –ø–æ—ç—Ç–æ–º—É —É–ø—Ä–æ—â—ë–Ω–Ω–æ:
            # –º—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ poll_votes —Å–æ–¥–µ—Ä–∂–∏—Ç user_id –≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö
            # –∏ –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏, —á—å–µ–≥–æ username —Ç–∞–º –Ω–µ—Ç
            # –≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å, –µ—Å–ª–∏ —Ç—ã —Ö—Ä–∞–Ω–∏—à—å user_id –∏ username –∑–∞—Ä–∞–Ω–µ–µ
            
            # –ü–æ–∫–∞: –ø—Ä–æ—Å—Ç–æ —Å–æ–±–µ—Ä—ë–º –≤—Å–µ—Ö, —Ç.–∫. –Ω–µ—Ç —Å–≤—è–∑–∏ username ‚Üî user_id
            mentions.append(f"@{username}")

        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö, –∫—Ç–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª
        voted_ids = poll_votes.get(poll_id, set())
        if voted_ids:
            # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Å–æ–æ—Ç–Ω–æ—Å–∏—Ç—å user_id ‚Üî username –ø–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ /start
            logging.info("üü° –û–ø—Ä–æ—Å –±—ã–ª, –Ω–æ –Ω–µ—Ç —Ç–æ—á–Ω–æ–π —Å–≤—è–∑–∏ username ‚Üî user_id")

        if mentions:
            text = (
                "‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*
–ö—Ç–æ-—Ç–æ –∏–∑ –≤–∞—Å –µ—â—ë –Ω–µ –æ—Ç–º–µ—Ç–∏–ª —É—á–∞—Å—Ç–∏–µ –≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –∑–∞–Ω—è—Ç–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ—Ç—å—Ç–µ—Å—å –≤ –æ–ø—Ä–æ—Å–µ –≤—ã—à–µ üëÜ\n\n"
                + " ".join(mentions)
            )
            await app.bot.send_message(
                chat_id=group["thread_id"],
                message_thread_id=group["thread_id"],
                text=text,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            logging.info(f"‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–∑ {group['name']} –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å")

    except Exception as e:
        logging.warning(f"‚ùó –û—à–∏–±–∫–∞ –≤ send_nonresponders_reminder: {e}")
