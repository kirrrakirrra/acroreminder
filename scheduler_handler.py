from google.oauth2 import service_account
from googleapiclient.discovery import build
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from reminder_handler import poll_to_group
# from reminder_handler import schedule_reminder
import datetime
import asyncio
import os
import logging

SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']
SERVICE_ACCOUNT_FILE = 'service_account.json'
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ Render Environment
SHEET_RANGE = '–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã!A1:W'  # –¥–æ –∫–æ–ª–æ–Ω–∫–∏ W –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ

creds = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES
)
sheets_service = build('sheets', 'v4', credentials=creds).spreadsheets()

ADMIN_ID = os.getenv("ADMIN_ID")
GROUP_ID = os.getenv("GROUP_ID")

check_hour = int(os.getenv("CHECK_HOUR", 11))
min_start = int(os.getenv("CHECK_MIN_START", 1))
min_end = int(os.getenv("CHECK_MIN_END", 3))

# –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
groups = [
    {
        "name": "–°—Ç–∞—Ä—à–µ–π –Ω–∞—á–∏–Ω–∞—é—â–µ–π –≥—Ä—É–ø–ø—ã",
        "days": ["Monday", "Wednesday", "Friday",],
        "time": "17:15",
        "thread_id": 2225,
        # "thread_id": 105,
    },
    {
        "name": "–°—Ç–∞—Ä—à–µ–π –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–µ–π –≥—Ä—É–ø–ø—ã",
        "days": ["Monday", "Wednesday", "Friday",],
        "time": "18:30",
        "thread_id": 7,
        # "thread_id": 362,
    },
    {
        "name": "–ú–ª–∞–¥—à–µ–π –≥—Ä—É–ø–ø—ã",
        "days": ["Tuesday", "Thursday",],
        "time": "17:30",
        "thread_id": 2226,
    },
]

pending = {}

cancel_messages = {
    "visa": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! üõÇ –°–µ–≥–æ–¥–Ω—è —è –Ω–∞ –≤–∏–∑–∞—Ä–∞–Ω–µ, –ø–æ—ç—Ç–æ–º—É –∑–∞–Ω—è—Ç–∏—è –Ω–µ –±—É–¥–µ—Ç. –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ —Ö–æ—Ä–æ—à–æ, —É–≤–∏–¥–∏–º—Å—è —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ! ‚òÄÔ∏è",
    "illness": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! ü§í –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø—Ä–∏–±–æ–ª–µ–ª –∏ –Ω–µ —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–∞–Ω—è—Ç–∏–µ. –ù–∞–¥–µ—é—Å—å –±—ã—Å—Ç—Ä–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ —Å–∫–æ—Ä–æ —É–≤–∏–¥–µ—Ç—å—Å—è —Å –≤–∞–º–∏! –ë–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è! üå∑",
    "unwell": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! üòå –°–µ–≥–æ–¥–Ω—è, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–µ–≤–∞–∂–Ω–æ –∏ –Ω–µ —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ ‚Äî —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å —Å –Ω–æ–≤—ã–º–∏ —Å–∏–ª–∞–º–∏! üí™",
    "unexpected": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! ‚ö†Ô∏è –ü–æ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–º –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞–º —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, —É–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑! üòä",
    "tech": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! ‚öôÔ∏è –°–µ–≥–æ–¥–Ω—è, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –∑–∞–ª–µ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –∏ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –£–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ç–µ–º, —á—Ç–æ–±—ã –≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—å. –î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏! ü§∏‚Äç‚ôÄÔ∏è",
}

def get_decision_keyboard(group_id):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"yes|{group_id}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"no|{group_id}")],
        [InlineKeyboardButton("ü§∏‚Äç‚ôÄÔ∏è –ü–æ–ª–∏–Ω–∞", callback_data=f"polina|{group_id}")],
        [InlineKeyboardButton("‚è≠ –ù–µ—Ç, –Ω–æ —è —Å–∞–º –Ω–∞–ø–∏—à—É –≤ –≥—Ä—É–ø–ø—É", callback_data=f"skip|{group_id}")],
    ])

def get_reason_keyboard(group_id):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("ü§í –ë–æ–ª–µ–∑–Ω—å", callback_data=f"reason|{group_id}|illness")],
        [InlineKeyboardButton("üõÇ –í–∏–∑–∞—Ä–∞–Ω", callback_data=f"reason|{group_id}|visa")],
        [InlineKeyboardButton("üòå –ü–ª–æ—Ö–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ", callback_data=f"reason|{group_id}|unwell")],
        [InlineKeyboardButton("‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ", callback_data=f"reason|{group_id}|unexpected")],
        [InlineKeyboardButton("‚öôÔ∏è –¢–µ—Ö. –Ω–µ–ø–æ–ª–∞–¥–∫–∏", callback_data=f"reason|{group_id}|tech")],
    ])
# ------------------------------------------------------------------------------------
async def check_expired_subscriptions(app, today_group_names):
    print("üîç check_expired_subscriptions –∑–∞–ø—É—â–µ–Ω–∞")
    logging.info("üîç check_expired_subscriptions –∑–∞–ø—É—â–µ–Ω–∞")

    try:
        resp = sheets_service.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=SHEET_RANGE
        ).execute()
        rows = resp.get('values', [])
        if not rows or len(rows) < 2:
            print("‚õîÔ∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            logging.warning("‚õîÔ∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        header = rows[0]
        try:
            idx_name = header.index("–ò–º—è —Ä–µ–±—ë–Ω–∫–∞")
            idx_group = header.index("–ì—Ä—É–ø–ø–∞")
            idx_used = header.index("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ")
            idx_end = header.index("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è")
            idx_diff = header.index("–†–∞–∑–Ω–∏—Ü–∞")
            idx_remaining = header.index("–û—Å—Ç–∞–ª–æ—Å—å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π")
            idx_used_left = header.index("–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π")
            idx_pause = header.index("–ü–∞—É–∑–∞")

        except ValueError as e:
            print(f"‚õîÔ∏è –ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}")
            logging.warning(f"‚õîÔ∏è –ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}")
            return

        logging.info(f"üîé –ì—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è: {today_group_names}")
        from collections import defaultdict
        usage_by_name = defaultdict(list)

        for row in rows[1:]:
            name = row[idx_name] if len(row) > idx_name else ""
            used = row[idx_used] if len(row) > idx_used else ""
            group = row[idx_group] if len(row) > idx_group else ""

            if not name or group not in today_group_names:
                continue

            try:
                used_num = int(used)
            except:
                used_num = 0

            usage_by_name[name].append({
                "used": used_num,
                "group": group
            })

        found = False
        for name, subs in usage_by_name.items():
            finished = [s for s in subs if s["used"] == 8]
            not_finished = [s for s in subs if s["used"] < 8]
        
            # ‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à—ë–Ω (–∏ –Ω–µ—Ç –¥—Ä—É–≥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ)
            if finished and not not_finished:
                for sub in finished:
                     # –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å —ç—Ç–∏–º –∏–º–µ–Ω–µ–º –∏ –≥—Ä—É–ø–ø–æ–π
                    for row in rows[1:]:
                        row_name = row[idx_name] if len(row) > idx_name else ""
                        row_group = row[idx_group] if len(row) > idx_group else ""
                        if row_name == name and row_group == sub["group"]:
                            # –î–∞—Ç—ã –ø–æ—Å–µ—â–µ–Ω–∏–π: –∫–æ–ª–æ–Ω–∫–∏ F‚ÄìM ‚Üí –∏–Ω–¥–µ–∫—Å—ã 5‚Äì12
                            dates = [row[i] for i in range(5, 13) if i < len(row) and row[i].strip()]
                            dates_text = "\n".join([f"‚Ä¢ {d}" for d in dates]) if dates else "‚Äî"
        
                            msg = (
                                f"‚ö†Ô∏è –ê–±–æ–Ω–µ–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à—ë–Ω:\n"
                                f"üë§ *–ò–º—è*: {name}\n"
                                f"üè∑Ô∏è *–ì—Ä—É–ø–ø–∞*: {sub['group']}\n"
                                f"‚úÖ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ*: 8 –∏–∑ 8\n"
                                f"üìÖ *–î–∞—Ç—ã –ø–æ—Å–µ—â–µ–Ω–∏–π*:\n{dates_text}"
                            )
        
                            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {msg}")
                            logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {msg}")
                            await app.bot.send_message(chat_id=ADMIN_ID, text=msg, parse_mode="Markdown")
                            found = True
                            break  # –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É
        
            # ‚ö†Ô∏è –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –Ω–æ —Å —Ä–∏—Å–∫–∞–º–∏
            elif not_finished:
                for sub in not_finished:
                    for row in rows[1:]:
                        row_name = row[idx_name] if len(row) > idx_name else ""
                        row_group = row[idx_group] if len(row) > idx_group else ""
                        if row_name == name and row_group == sub["group"]:
                            end = row[idx_end] if len(row) > idx_end else ""
                            used = row[idx_used] if len(row) > idx_used else "0"
        
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
                            expired_warning = ""
                            for fmt in ["%d.%m.%Y", "%d/%m/%y", "%d/%m/%Y", "%Y-%m-%d"]:
                                try:
                                    end_date = datetime.datetime.strptime(end, fmt)
                                    if end_date.date() < datetime.datetime.now().date() and int(used) < 8:
                                        expired_warning = f"‚ÄºÔ∏è *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è (`{end}`)*"
                                    break
                                except ValueError:
                                    continue
        
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
                            diff_info = ""
                            if len(row) > idx_diff and row[idx_diff].strip():
                                used_left = row[idx_used_left].strip() if len(row) > idx_used_left else "‚Äî"
                                remaining = row[idx_remaining].strip() if len(row) > idx_remaining else "‚Äî"
                                diff_info = (
                                    f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å *{used_left}* –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π, "
                                    f"–∞ –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ä–æ–∫–∞ ‚Äî *{remaining}* –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫."
                                )
                            # ‚è∏Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—É–∑—É
                            on_pause = row[idx_pause].strip().upper() == "TRUE" if len(row) > idx_pause else False
                            pause_text = "\n‚è∏Ô∏è *–ù–∞ –ø–∞—É–∑–µ*" if on_pause else ""
        
                            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                            if expired_warning or diff_info:
                                msg = (
                                    f"‚ö†Ô∏è *–ê–±–æ–Ω–µ–º–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è:*\n"
                                    f"üë§ *–ò–º—è:* {name}\n"
                                    f"üè∑Ô∏è *–ì—Ä—É–ø–ø–∞:* {sub['group']}\n"
                                    f"‚úÖ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:* {used} –∏–∑ 8\n"
                                    f"{diff_info}\n\n{expired_warning}{pause_text}".strip()
                                )
        
                                print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {msg}")
                                logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {msg}")
                                await app.bot.send_message(chat_id=ADMIN_ID, text=msg, parse_mode="Markdown")
                                found = True
                                break  # –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—Ç—Ä–æ–∫–∏
        
        if not found:
            logging.info("‚úÖ –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏–ª–∏ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    except Exception as e:
        logging.warning(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {e}")

# -----------------------------------------------------------------------------

async def ask_admin(app, group_id, group):
    msg = await app.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"–°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è {group['name']} –≤ {group['time']} –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é?",
        reply_markup=get_decision_keyboard(group_id)
    )
    pending[msg.message_id] = group

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("|")
    action = data[0]
    group_id = int(data[1])
    group = groups[group_id]

    if action == "yes":
        # –°–æ–æ–±—â–µ–Ω–∏–µ-–æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=group["thread_id"],
            text=f"–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! –ó–∞–Ω—è—Ç–∏–µ –¥–ª—è {group['name']} –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤ {group['time']} ü§∏üèªü§∏üèª‚Äç‚ôÄÔ∏è"
        )
    
        # –û–ø—Ä–æ—Å
        try:
            poll_msg = await context.bot.send_poll(
                chat_id=GROUP_ID,
                question="–ö—Ç–æ –±—É–¥–µ—Ç —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏?",
                options=["‚úÖ –ë—É–¥–µ–º –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É", "ü§∏üèª‚Äç‚ôÄÔ∏è –ë—É–¥–µ–º —Ä–∞–∑–æ–≤–æ", "‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º"],
                is_anonymous=False,
                allows_multiple_answers=False,
                message_thread_id=group["thread_id"],
            )
            context.bot_data[poll_msg.poll.id] = poll_msg.poll  # üëà –≤–æ—Ç —ç—Ç–æ –¥–æ–±–∞–≤—å
            from reminder_handler import poll_to_group
            poll_to_group[poll_msg.poll.id] = group
            # await schedule_reminder(context.application, group, poll_msg.poll.id)
        
        except Exception as e:
            logging.warning(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å: {e}")
        
        await query.edit_message_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ‚úÖ")

    elif action == "no":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–Ω—è—Ç–∏—è:", reply_markup=get_reason_keyboard(group_id))

    elif action == "reason":
        reason_key = data[2]
        message = cancel_messages.get(reason_key, "–ó–∞–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è.")
        await context.bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=group["thread_id"],
            text=message
        )
        await query.edit_message_text("–û—Ç–º–µ–Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ ‚ùå")

    elif action == "polina":
        await context.bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=group["thread_id"],
            text=(
                f"–î–æ–±—Ä–æ–≥–æ –≤—Å–µ–º —É—Ç—Ä–∞! –ó–∞–Ω—è—Ç–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤ {group['time']}!\n"
                f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–≤–µ–¥—ë—Ç –ü–æ–ª–∏–Ω–∞ @Polina_NhaTrang_stretchingü§∏‚Äç‚ôÇ\n"
                f"–ü—Ä–æ—à—É –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∏–ª–∏ –ª–∞–π–∫–æ–º, –∫—Ç–æ –±—É–¥–µ—Ç –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏!üåü"
            )
        )
        await query.edit_message_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —Å –ü–æ–ª–∏–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")

    elif action == "skip":
        await query.edit_message_text("–•–æ—Ä–æ—à–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –ø—É–±–ª–∏–∫—É–µ–º.")
    pass
    
async def scheduler(app):
    await asyncio.sleep(30)  # –¥–∞—ë–º Render –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    last_check = None
    last_expiry_check = None

    while True:
        try:
            now_utc = datetime.datetime.utcnow()
            now = now_utc + datetime.timedelta(hours=7)
            weekday = now.strftime("%A")
            current_time = now.strftime("%H:%M")

            logging.info(f"[scheduler] –°–µ–π—á–∞—Å {current_time} {weekday}")
            logging.info(f"[scheduler] CHECK_HOUR={check_hour}, MIN={min_start}‚Äì{min_end}")

            # üîÅ –û–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ 11:00
            # if now.hour == 11 and 1 <= now.minute <= 3:
            if now.hour == check_hour and min_start <= now.minute <= min_end:
                if last_check != now.date():
                    logging.info("[scheduler] –í—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–æ—Å–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º")
                    for idx, group in enumerate(groups):
                        if weekday in group["days"]:
                            await ask_admin(app, idx, group)
                    last_check = now.date()
                else:
                    logging.info("[scheduler] –£–∂–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è")

            # üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –≤ 12:15
            if now.hour == 12 and 1 <= now.minute <= 4:
                if last_expiry_check != now.date():
                    logging.info("[scheduler] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")

                    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–¥–µ -> –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
                    group_name_map = {
                        "–°—Ç–∞—Ä—à–µ–π –Ω–∞—á–∏–Ω–∞—é—â–µ–π –≥—Ä—É–ø–ø—ã": "6-9 –ª–µ—Ç –Ω–∞—á–∏–Ω–∞—é—â–∏–µ",
                        "–°—Ç–∞—Ä—à–µ–π –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–µ–π –≥—Ä—É–ø–ø—ã": "6-9 –ª–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
                        "–ú–ª–∞–¥—à–µ–π –≥—Ä—É–ø–ø—ã": "4-5 –ª–µ—Ç",
                    }
        
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ –∫–æ–¥–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
                    today_groups = [
                        group_name_map.get(group["name"])
                        for group in groups
                        if weekday in group["days"]
                    ]
                    await check_expired_subscriptions(app, today_groups)
                    last_expiry_check = now.date()
                else:
                    logging.info("[scheduler] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ —É–∂–µ –±—ã–ª–∞ —Å–µ–≥–æ–¥–Ω—è")

            await asyncio.sleep(20)

        except Exception as e:
            logging.error(f"[scheduler] –û—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(10)
